#!/usr/bin/env ruby


require 'openssl'

base = 2
prime = 30637775445823436879454952454237901621829966657401721746070860651817441339168005303717538436267761925943508219262505232611113257484851150568506213078797989702585789761985016603411556671624578696738516904789548864160394831287627817317795838688739893928409073583196284357604505649990517750570165846353611753076552790863204543854051580045397850821877292938328081777878940113256091409340060270095566957589497638300091443155492672066747993613750763002148357864768189629663838591806566186778994459586522266584981205390297672287705399674114572450098637137403303995202577718744551714538059154961659624442327783807941820722227
private = 456
public = base.to_bn.mod_exp(private, prime)

hello = $stdin.gets
raise "suck" unless hello == "SimpleSSLv0\n"

other_pub = $stdin.gets.strip.to_i(16)

$stderr.puts "client's public key: #{other_pub}"

session_id = other_pub.to_bn.mod_exp(private, prime).to_i
$stderr.puts "session key in hex: #{session_id.to_s(16)}"
session_id = [session_id.to_s(16)].pack("H*")
$stderr.puts session_id.length
while (session_id.length < 257)
  session_id = "\0" + session_id
end
$stderr.puts session_id.length

symm_key = nil
IO.popen("openssl sha256", "r+") do |io|
  io.write(session_id)
  io.flush
  io.close_write
  symm_key = io.readlines.first
end
$stderr.puts symm_key.inspect
$stderr.puts symm_key.slice(9, 32)
symm_key = [symm_key.slice(9, 32)].pack("H*")
$stderr.puts symm_key.inspect

puts 'OK'
puts public.to_s(16).downcase
$stdout.flush

server_nonce = 0
client_nonce = 0xffffffffffffffff

while true
  len = $stdin.read(4)
$stderr.puts "got first line: #{len.inspect}"
  break if len.empty?

  len = len.unpack("L>").first

  decrypt = OpenSSL::Cipher.new('aes-128-gcm')
  decrypt.decrypt
  decrypt.key = symm_key
  iv = [0xffffffff].pack("L>") + [client_nonce].pack("Q>")
  decrypt.iv = iv

  $stderr.puts(iv.unpack("H*"))
  decrypt.auth_data = ''
  
  encrypt = OpenSSL::Cipher.new('aes-128-gcm')
  encrypt.encrypt
  encrypt.key = symm_key
  encrypt.iv = [0].pack("L>") + [server_nonce].pack("Q>")
  encrypt.auth_data = ''

  server_nonce += 1
  client_nonce -= 1

  data = $stdin.read(len)

  plain = decrypt.update(data) + decrypt.final
  encrypted = encrypt.update(plain) + encrypt.final

  $stdout.write([encrypted.length].pack("L>") + encrypted)
  $stdout.flush
end
